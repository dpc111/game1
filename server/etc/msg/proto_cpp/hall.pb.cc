// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hall {

namespace {

const ::google::protobuf::Descriptor* c2r_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c2r_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* r2c_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  r2c_login_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hall_2eproto() {
  protobuf_AddDesc_hall_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hall.proto");
  GOOGLE_CHECK(file != NULL);
  c2r_login_descriptor_ = file->message_type(0);
  static const int c2r_login_offsets_[1] = {
  };
  c2r_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c2r_login_descriptor_,
      c2r_login::default_instance_,
      c2r_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2r_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2r_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c2r_login));
  r2c_login_descriptor_ = file->message_type(1);
  static const int r2c_login_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(r2c_login, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(r2c_login, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(r2c_login, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(r2c_login, icon_),
  };
  r2c_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      r2c_login_descriptor_,
      r2c_login::default_instance_,
      r2c_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(r2c_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(r2c_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(r2c_login));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hall_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c2r_login_descriptor_, &c2r_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    r2c_login_descriptor_, &r2c_login::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hall_2eproto() {
  delete c2r_login::default_instance_;
  delete c2r_login_reflection_;
  delete r2c_login::default_instance_;
  delete r2c_login_reflection_;
}

void protobuf_AddDesc_hall_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nhall.proto\022\004hall\"\013\n\tc2r_login\"A\n\tr2c_l"
    "ogin\022\013\n\003err\030\001 \002(\t\022\013\n\003uid\030\002 \002(\005\022\014\n\004name\030\003"
    " \002(\t\022\014\n\004icon\030\004 \002(\t", 98);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hall.proto", &protobuf_RegisterTypes);
  c2r_login::default_instance_ = new c2r_login();
  r2c_login::default_instance_ = new r2c_login();
  c2r_login::default_instance_->InitAsDefaultInstance();
  r2c_login::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hall_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hall_2eproto {
  StaticDescriptorInitializer_hall_2eproto() {
    protobuf_AddDesc_hall_2eproto();
  }
} static_descriptor_initializer_hall_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c2r_login::c2r_login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hall.c2r_login)
}

void c2r_login::InitAsDefaultInstance() {
}

c2r_login::c2r_login(const c2r_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hall.c2r_login)
}

void c2r_login::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c2r_login::~c2r_login() {
  // @@protoc_insertion_point(destructor:hall.c2r_login)
  SharedDtor();
}

void c2r_login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c2r_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c2r_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c2r_login_descriptor_;
}

const c2r_login& c2r_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hall_2eproto();
  return *default_instance_;
}

c2r_login* c2r_login::default_instance_ = NULL;

c2r_login* c2r_login::New() const {
  return new c2r_login;
}

void c2r_login::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c2r_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hall.c2r_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hall.c2r_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hall.c2r_login)
  return false;
#undef DO_
}

void c2r_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hall.c2r_login)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hall.c2r_login)
}

::google::protobuf::uint8* c2r_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hall.c2r_login)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hall.c2r_login)
  return target;
}

int c2r_login::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c2r_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c2r_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c2r_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c2r_login::MergeFrom(const c2r_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c2r_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c2r_login::CopyFrom(const c2r_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2r_login::IsInitialized() const {

  return true;
}

void c2r_login::Swap(c2r_login* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c2r_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c2r_login_descriptor_;
  metadata.reflection = c2r_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int r2c_login::kErrFieldNumber;
const int r2c_login::kUidFieldNumber;
const int r2c_login::kNameFieldNumber;
const int r2c_login::kIconFieldNumber;
#endif  // !_MSC_VER

r2c_login::r2c_login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hall.r2c_login)
}

void r2c_login::InitAsDefaultInstance() {
}

r2c_login::r2c_login(const r2c_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hall.r2c_login)
}

void r2c_login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

r2c_login::~r2c_login() {
  // @@protoc_insertion_point(destructor:hall.r2c_login)
  SharedDtor();
}

void r2c_login::SharedDtor() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void r2c_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* r2c_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return r2c_login_descriptor_;
}

const r2c_login& r2c_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hall_2eproto();
  return *default_instance_;
}

r2c_login* r2c_login::default_instance_ = NULL;

r2c_login* r2c_login::New() const {
  return new r2c_login;
}

void r2c_login::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        err_->clear();
      }
    }
    uid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool r2c_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hall.r2c_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string err = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "err");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // required string icon = 4;
      case 4: {
        if (tag == 34) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hall.r2c_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hall.r2c_login)
  return false;
#undef DO_
}

void r2c_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hall.r2c_login)
  // required string err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "err");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->err(), output);
  }

  // required int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hall.r2c_login)
}

::google::protobuf::uint8* r2c_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hall.r2c_login)
  // required string err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "err");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->err(), target);
  }

  // required int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hall.r2c_login)
  return target;
}

int r2c_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

    // required int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void r2c_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const r2c_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const r2c_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void r2c_login::MergeFrom(const r2c_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void r2c_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void r2c_login::CopyFrom(const r2c_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool r2c_login::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void r2c_login::Swap(r2c_login* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata r2c_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = r2c_login_descriptor_;
  metadata.reflection = r2c_login_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hall

// @@protoc_insertion_point(global_scope)
