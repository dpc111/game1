// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hall.proto

#ifndef PROTOBUF_hall_2eproto_INCLUDED
#define PROTOBUF_hall_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_hall_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsc2r_loginImpl();
void InitDefaultsc2r_login();
void InitDefaultsr2c_loginImpl();
void InitDefaultsr2c_login();
inline void InitDefaults() {
  InitDefaultsc2r_login();
  InitDefaultsr2c_login();
}
}  // namespace protobuf_hall_2eproto
namespace hall {
class c2r_login;
class c2r_loginDefaultTypeInternal;
extern c2r_loginDefaultTypeInternal _c2r_login_default_instance_;
class r2c_login;
class r2c_loginDefaultTypeInternal;
extern r2c_loginDefaultTypeInternal _r2c_login_default_instance_;
}  // namespace hall
namespace google {
namespace protobuf {
template<> ::hall::c2r_login* Arena::Create< ::hall::c2r_login>(Arena*);
template<> ::hall::r2c_login* Arena::Create< ::hall::r2c_login>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace hall {

// ===================================================================

class c2r_login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hall.c2r_login) */ {
 public:
  c2r_login();
  virtual ~c2r_login();

  c2r_login(const c2r_login& from);

  inline c2r_login& operator=(const c2r_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  c2r_login(c2r_login&& from) noexcept
    : c2r_login() {
    *this = ::std::move(from);
  }

  inline c2r_login& operator=(c2r_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c2r_login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const c2r_login* internal_default_instance() {
    return reinterpret_cast<const c2r_login*>(
               &_c2r_login_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(c2r_login* other);
  friend void swap(c2r_login& a, c2r_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline c2r_login* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<c2r_login>(NULL);
  }

  c2r_login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<c2r_login>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const c2r_login& from);
  void MergeFrom(const c2r_login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(c2r_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hall.c2r_login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_hall_2eproto::TableStruct;
  friend void ::protobuf_hall_2eproto::InitDefaultsc2r_loginImpl();
};
// -------------------------------------------------------------------

class r2c_login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hall.r2c_login) */ {
 public:
  r2c_login();
  virtual ~r2c_login();

  r2c_login(const r2c_login& from);

  inline r2c_login& operator=(const r2c_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  r2c_login(r2c_login&& from) noexcept
    : r2c_login() {
    *this = ::std::move(from);
  }

  inline r2c_login& operator=(r2c_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const r2c_login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const r2c_login* internal_default_instance() {
    return reinterpret_cast<const r2c_login*>(
               &_r2c_login_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(r2c_login* other);
  friend void swap(r2c_login& a, r2c_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline r2c_login* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<r2c_login>(NULL);
  }

  r2c_login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<r2c_login>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const r2c_login& from);
  void MergeFrom(const r2c_login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(r2c_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string err = 1;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // required string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string icon = 4;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 4;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // required int32 uid = 2;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hall.r2c_login)
 private:
  void set_has_err();
  void clear_has_err();
  void set_has_uid();
  void clear_has_uid();
  void set_has_name();
  void clear_has_name();
  void set_has_icon();
  void clear_has_icon();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::int32 uid_;
  friend struct ::protobuf_hall_2eproto::TableStruct;
  friend void ::protobuf_hall_2eproto::InitDefaultsr2c_loginImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// c2r_login

// -------------------------------------------------------------------

// r2c_login

// required string err = 1;
inline bool r2c_login::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void r2c_login::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void r2c_login::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void r2c_login::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& r2c_login::err() const {
  // @@protoc_insertion_point(field_get:hall.r2c_login.err)
  return err_.GetNoArena();
}
inline void r2c_login::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hall.r2c_login.err)
}
#if LANG_CXX11
inline void r2c_login::set_err(::std::string&& value) {
  set_has_err();
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hall.r2c_login.err)
}
#endif
inline void r2c_login::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hall.r2c_login.err)
}
inline void r2c_login::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hall.r2c_login.err)
}
inline ::std::string* r2c_login::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:hall.r2c_login.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* r2c_login::release_err() {
  // @@protoc_insertion_point(field_release:hall.r2c_login.err)
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void r2c_login::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:hall.r2c_login.err)
}

// required int32 uid = 2;
inline bool r2c_login::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void r2c_login::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void r2c_login::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void r2c_login::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 r2c_login::uid() const {
  // @@protoc_insertion_point(field_get:hall.r2c_login.uid)
  return uid_;
}
inline void r2c_login::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:hall.r2c_login.uid)
}

// required string name = 3;
inline bool r2c_login::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void r2c_login::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void r2c_login::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void r2c_login::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& r2c_login::name() const {
  // @@protoc_insertion_point(field_get:hall.r2c_login.name)
  return name_.GetNoArena();
}
inline void r2c_login::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hall.r2c_login.name)
}
#if LANG_CXX11
inline void r2c_login::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hall.r2c_login.name)
}
#endif
inline void r2c_login::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hall.r2c_login.name)
}
inline void r2c_login::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hall.r2c_login.name)
}
inline ::std::string* r2c_login::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:hall.r2c_login.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* r2c_login::release_name() {
  // @@protoc_insertion_point(field_release:hall.r2c_login.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void r2c_login::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:hall.r2c_login.name)
}

// required string icon = 4;
inline bool r2c_login::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void r2c_login::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void r2c_login::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void r2c_login::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
inline const ::std::string& r2c_login::icon() const {
  // @@protoc_insertion_point(field_get:hall.r2c_login.icon)
  return icon_.GetNoArena();
}
inline void r2c_login::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hall.r2c_login.icon)
}
#if LANG_CXX11
inline void r2c_login::set_icon(::std::string&& value) {
  set_has_icon();
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hall.r2c_login.icon)
}
#endif
inline void r2c_login::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hall.r2c_login.icon)
}
inline void r2c_login::set_icon(const char* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hall.r2c_login.icon)
}
inline ::std::string* r2c_login::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:hall.r2c_login.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* r2c_login::release_icon() {
  // @@protoc_insertion_point(field_release:hall.r2c_login.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void r2c_login::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:hall.r2c_login.icon)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hall

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hall_2eproto_INCLUDED
