// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hall.proto

#ifndef PROTOBUF_hall_2eproto__INCLUDED
#define PROTOBUF_hall_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hall {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_hall_2eproto();
void protobuf_AssignDesc_hall_2eproto();
void protobuf_ShutdownFile_hall_2eproto();

class c2r_login;
class r2c_login;

// ===================================================================

class c2r_login : public ::google::protobuf::Message {
 public:
  c2r_login();
  virtual ~c2r_login();

  c2r_login(const c2r_login& from);

  inline c2r_login& operator=(const c2r_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c2r_login& default_instance();

  void Swap(c2r_login* other);

  // implements Message ----------------------------------------------

  c2r_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c2r_login& from);
  void MergeFrom(const c2r_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hall.c2r_login)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hall_2eproto();
  friend void protobuf_AssignDesc_hall_2eproto();
  friend void protobuf_ShutdownFile_hall_2eproto();

  void InitAsDefaultInstance();
  static c2r_login* default_instance_;
};
// -------------------------------------------------------------------

class r2c_login : public ::google::protobuf::Message {
 public:
  r2c_login();
  virtual ~r2c_login();

  r2c_login(const r2c_login& from);

  inline r2c_login& operator=(const r2c_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const r2c_login& default_instance();

  void Swap(r2c_login* other);

  // implements Message ----------------------------------------------

  r2c_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const r2c_login& from);
  void MergeFrom(const r2c_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // required int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string icon = 4;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 4;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // @@protoc_insertion_point(class_scope:hall.r2c_login)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* err_;
  ::std::string* name_;
  ::std::string* icon_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_hall_2eproto();
  friend void protobuf_AssignDesc_hall_2eproto();
  friend void protobuf_ShutdownFile_hall_2eproto();

  void InitAsDefaultInstance();
  static r2c_login* default_instance_;
};
// ===================================================================


// ===================================================================

// c2r_login

// -------------------------------------------------------------------

// r2c_login

// required string err = 1;
inline bool r2c_login::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void r2c_login::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void r2c_login::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void r2c_login::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& r2c_login::err() const {
  // @@protoc_insertion_point(field_get:hall.r2c_login.err)
  return *err_;
}
inline void r2c_login::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:hall.r2c_login.err)
}
inline void r2c_login::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:hall.r2c_login.err)
}
inline void r2c_login::set_err(const char* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hall.r2c_login.err)
}
inline ::std::string* r2c_login::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:hall.r2c_login.err)
  return err_;
}
inline ::std::string* r2c_login::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void r2c_login::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:hall.r2c_login.err)
}

// required int32 uid = 2;
inline bool r2c_login::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void r2c_login::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void r2c_login::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void r2c_login::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 r2c_login::uid() const {
  // @@protoc_insertion_point(field_get:hall.r2c_login.uid)
  return uid_;
}
inline void r2c_login::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:hall.r2c_login.uid)
}

// required string name = 3;
inline bool r2c_login::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void r2c_login::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void r2c_login::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void r2c_login::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& r2c_login::name() const {
  // @@protoc_insertion_point(field_get:hall.r2c_login.name)
  return *name_;
}
inline void r2c_login::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:hall.r2c_login.name)
}
inline void r2c_login::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:hall.r2c_login.name)
}
inline void r2c_login::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hall.r2c_login.name)
}
inline ::std::string* r2c_login::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:hall.r2c_login.name)
  return name_;
}
inline ::std::string* r2c_login::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void r2c_login::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:hall.r2c_login.name)
}

// required string icon = 4;
inline bool r2c_login::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void r2c_login::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void r2c_login::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void r2c_login::clear_icon() {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& r2c_login::icon() const {
  // @@protoc_insertion_point(field_get:hall.r2c_login.icon)
  return *icon_;
}
inline void r2c_login::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set:hall.r2c_login.icon)
}
inline void r2c_login::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set_char:hall.r2c_login.icon)
}
inline void r2c_login::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hall.r2c_login.icon)
}
inline ::std::string* r2c_login::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:hall.r2c_login.icon)
  return icon_;
}
inline ::std::string* r2c_login::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void r2c_login::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:hall.r2c_login.icon)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hall

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hall_2eproto__INCLUDED
